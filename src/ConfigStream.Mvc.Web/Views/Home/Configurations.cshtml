@{
    ViewData["Title"] = "Configuration Management";
}

<div class="text-center">
    <h1 class="display-4">Dynamic Configuration Management</h1>
    <p>Manage your application configurations dynamically.</p>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Configuration Records</h5>
                <button class="btn btn-primary" onclick="showAddModal()">Add New</button>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <input type="text" class="form-control" id="filterByName" placeholder="Filter by Name" />
                    </div>
                    <div class="col-md-4">
                        <select class="form-control" id="filterByApplication">
                            <option value="">All Applications</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-secondary" onclick="loadConfigurations()">Refresh</button>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped" id="configurationsTable">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Value</th>
                                <th>IsActive</th>
                                <th>Application</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Test Configuration Reader -->
<div class="row mt-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5>Test Configuration Reader</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <input type="text" class="form-control" id="testKey"
                            placeholder="Enter configuration key to test" />
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-success" onclick="testReader()">Test Reader</button>
                    </div>
                </div>
                <div id="testResult" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Modal -->
<div class="modal fade" id="configModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="configModalTitle">Add Configuration</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="configForm">
                    <div class="mb-3">
                        <label for="configName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="configName" required />
                    </div>
                    <div class="mb-3">
                        <label for="configType" class="form-label">Type</label>
                        <select class="form-control" id="configType" required>
                            <option value="1">String</option>
                            <option value="2">Number</option>
                            <option value="3">JSON</option>
                            <option value="4">Boolean</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="configValue" class="form-label">Value</label>
                        <input type="text" class="form-control" id="configValue" required />
                    </div>
                    <div class="mb-3">
                        <label for="configApplication" class="form-label">Application Name</label>
                        <input type="text" class="form-control" id="configApplication" required />
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="configIsActive" checked />
                        <label class="form-check-label" for="configIsActive">Is Active</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="saveConfiguration()">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentEditId = null;

        $(document).ready(function () {
            loadConfigurations();
            loadApplications();

            $('#filterByName').on('keyup', function () {
                filterConfigurations();
            });

            $('#filterByApplication').on('change', function () {
                loadConfigurations(); // Reload data for different application
            });
        });

        function loadConfigurations() {
            const appName = $('#filterByApplication').val();
            
            // If no specific application selected, get ALL configurations from ALL applications
            const url = appName ? `/api/configuration?applicationName=${appName}` : '/api/configuration';
            
            $.get(url, function (data) {
                const tbody = $('#configurationsTable tbody');
                tbody.empty();

                data.forEach(function (config) {
                    const typeText = getTypeText(config.type);
                    const row = `
                    <tr data-id="${config.id || ''}" data-name="${config.name.toLowerCase()}" data-app="${config.applicationName.toLowerCase()}">
                        <td>${config.name}</td>
                        <td>${typeText}</td>
                        <td>${config.value || ''}</td>
                        <td>${config.isActive === 1 ? 'Yes' : 'No'}</td>
                        <td>${config.applicationName}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editConfiguration('${config.applicationName}', '${config.name}')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteConfiguration('${config.applicationName}', '${config.name}')">Delete</button>
                        </td>
                    </tr>
                `;
                    tbody.append(row);
                });
            }).fail(function () {
                alert('Failed to load configurations');
            });
        }

        function getTypeText(typeValue) {
            switch (typeValue) {
                case 1: return 'String';
                case 2: return 'Number';
                case 3: return 'JSON';
                case 4: return 'Boolean';
                default: return 'Unknown';
            }
        }

        function loadApplications() {
            $.get('/api/configuration/applications', function (data) {
                const select = $('#filterByApplication');
                select.find('option:not(:first)').remove();

                data.forEach(function (app) {
                    select.append(`<option value="${app}">${app}</option>`);
                });
            });
        }

        function filterConfigurations() {
            const nameFilter = $('#filterByName').val().toLowerCase();
            const appFilter = $('#filterByApplication').val().toLowerCase();

            $('#configurationsTable tbody tr').each(function () {
                const row = $(this);
                const name = row.data('name');
                const app = row.data('app');

                const nameMatch = !nameFilter || name.includes(nameFilter);
                const appMatch = !appFilter || app === appFilter;

                if (nameMatch && appMatch) {
                    row.show();
                } else {
                    row.hide();
                }
            });
        }

        function showAddModal() {
            currentEditId = null;
            $('#configModalTitle').text('Add Configuration');
            $('#configForm')[0].reset();
            $('#configIsActive').prop('checked', true);
            $('#configModal').modal('show');
        }

        function editConfiguration(applicationName, name) {
            $.get(`/api/configuration/${encodeURIComponent(applicationName)}/${encodeURIComponent(name)}`, function (config) {
                currentEditId = `${applicationName}|${name}`;
                $('#configModalTitle').text('Edit Configuration');
                $('#configName').val(config.name);
                $('#configType').val(config.type);
                $('#configValue').val(config.value || '');
                $('#configApplication').val(config.applicationName);
                $('#configIsActive').prop('checked', config.isActive === 1);
                $('#configModal').modal('show');
            }).fail(function () {
                alert('Failed to load configuration');
            });
        }

        function saveConfiguration() {
            const config = {
                name: $('#configName').val(),
                type: parseInt($('#configType').val()),
                value: $('#configValue').val(),
                applicationName: $('#configApplication').val(),
                isActive: $('#configIsActive').is(':checked') ? 1 : 0
            };

            const method = currentEditId ? 'PUT' : 'POST';
            const url = '/api/configuration';

            $.ajax({
                url: url,
                method: method,
                contentType: 'application/json',
                data: JSON.stringify(config),
                success: function () {
                    $('#configModal').modal('hide');
                    loadConfigurations();
                    loadApplications();
                },
                error: function () {
                    alert('Failed to save configuration');
                }
            });
        }

        function deleteConfiguration(applicationName, name) {
            if (confirm('Are you sure you want to delete this configuration?')) {
                $.ajax({
                    url: `/api/configuration/${encodeURIComponent(applicationName)}/${encodeURIComponent(name)}`,
                    method: 'DELETE',
                    success: function () {
                        loadConfigurations();
                    },
                    error: function () {
                        alert('Failed to delete configuration');
                    }
                });
            }
        }

        function testReader() {
            const key = $('#testKey').val();
            if (!key) {
                alert('Please enter a configuration key');
                return;
            }

            $.get(`/api/configuration/test-reader/${key}`, function (data) {
                $('#testResult').html(`
                <div class="alert alert-success">
                    <strong>Success!</strong><br>
                    Key: ${data.key}<br>
                    Value: ${data.value}<br>
                    Type: ${data.type}
                </div>
            `);
            }).fail(function (xhr) {
                const error = xhr.responseJSON ? xhr.responseJSON.error : 'Unknown error';
                $('#testResult').html(`
                <div class="alert alert-danger">
                    <strong>Error!</strong><br>
                    ${error}
                </div>
            `);
            });
        }

    </script>
}